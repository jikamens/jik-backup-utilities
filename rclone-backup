#!/usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use File::Basename;
use File::Slurp;
use File::Temp 'tempfile';
use Getopt::Long;
use Time::Local;

my $whoami = basename $0;
my $usage = <<EOF;
Usage: $whoami [-h|--help] [-v|--verbose [..]] [-q|--quiet] [-n|--dryrun]
        [--copy-links] [--rclone-config=file]
        [--ls|--newest|--verify condition [...]|--filters] rclone-spec-file

    --ls       List files in source
    --newest   Print timestamp and path of newest file in source
    --verify   Verify (some) files in source against files in destination
    --filters  List file filters in backup configuration

    Valid --verify conditions:

    all               - verify all files in backup
    data=[<]number[%] - verify the specified amount of data (bytes or
                        percentage of total data size, "<" means hard limit)
    files=number[%]   - verify the specified number of files
    age=timespec      - verify files up to the specified age (rclone syntax)
EOF
$ENV{RCLONE_FAST_LIST} = 'true';

my $args = &parse_args;
my $verbose = $args->{verbose};
print Dumper($args) if $verbose;

my $config = &parse_config($args->{config_file});
print Dumper($config) if $verbose;

if ($args->{command} eq "verify") {
    &verify($args, $config);
} elsif ($args->{command} eq "newest") {
    &newest($args, $config);
} elsif ($args->{command} eq "filters") {
    if (@{$config->{filters}}) {
        print(join("\n", @{$config->{filters}}), "\n");
    }
    exit;
} else {
    if ($config->{pre_command} and !$args->{dryrun} and
        system($config->{pre_command})) {
        die $config->{pre_command}, " failed\n";
    }
    if ($args->{command} eq "sync") {
        &archive_special_files($args, $config)
            if ($config->{archive_specials});
    }

    my(@cmd) = &make_rclone_cmd($args, $config);
    if ($verbose) {
        for (@cmd) {
            if (/\s/) {
                print "'$_' ";
            } else {
                print "$_ ";
            }
        }
        print("\n");
    }
    system(@cmd) and die;
}

sub unparse_bytes {
    my($bytes) = @_;

    if ($bytes < 1024) {
        return "${bytes}B";
    }
    elsif ($bytes < 1024 * 1024) {
        return sprintf("%.1fK", $bytes / 1024);
    }
    elsif ($bytes < 1024 * 1024 * 1024) {
        return sprintf("%.1fM", $bytes / 1024 / 1024);
    }
    elsif ($bytes < 1024 * 1024 * 1024 * 1024) {
        return sprintf("%.1fG", $bytes / 1024 / 1024 / 1024);
    }
    else {
        return sprintf("%.1fT", $bytes / 1024 / 1024 / 1024 / 1024);
    }
}

sub newest {
    my($args, $config) = @_;
    my(@cmd) = (&rclone_base_cmd($args, $config), &get_filters($config),
                'lsf', '--recursive', '--files-only', '--format', 'tp',
                $config->{source});
    print("@cmd\n") if ($verbose);
    open(LSF, "-|", @cmd) or die;
    my $newest = '';
    my $newest_stamp = 0;
    while (<LSF>) {
        my($Y, $M, $D, $h, $m, $s, $path) = /^(\d+)-0*(\d+)-0*(\d+) 0*(\d+):0*(\d+):0*(\d+);(.*)/ or next;
        my $stamp = timelocal($s, $m, $h, $D, $M-1, $Y);
        # Don't allow files with timestamps in the future to screw things up.
        if ($newest_stamp < $stamp and $stamp < time()) {
            $newest = $path;
            $newest_stamp = $stamp;
        }
    }
    close(LSF) or die;
    print(scalar localtime($newest_stamp), " (@", $newest_stamp, ") ",
          $newest, "\n");
}

sub parse_verify {
    my($args) = @_;
    my %verify;

    while (my($type, $spec) = each %{$args->{verify}}) {
        my $hard = $spec =~ s/^<//;
        my $pct = $spec =~ s/%$//;
        if ($type eq 'all') {
            $verify{all} = 1;
            next;
        }
        die "Verify spec \"$args->{verify}->{$type}\" is not a number\n$usage"
            if ($type ne 'age' and $spec !~ /^\d+$/);
        if ($type eq 'data') {
            $verify{size} = $spec;
            $verify{size_pct} = $pct;
            $verify{size_hard} = $hard;
            next;
        }
        elsif ($type eq 'files') {
            $verify{count} = $spec;
            $verify{count_pct} = $pct;
            next;
        }
        elsif ($type eq 'age') {
            $verify{age} = $spec;
            $verify{since} = (time() - &parse_age($spec));
        }
        else {
            die "Unrecognized verify type \"$type\"\n$usage";
        }
    }
    if ($verify{size} or $verify{count} or $verify{age}) {
        die "Verify condition \"all\" conflicts with other conditions\n$usage"
            if ($verify{all});
    }
    else {
        $verify{all} = 1;
    }
    return \%verify;
}

sub parse_age {
    my($age) = @_;
    local $_ = $age;
    my($suffix);
    if (s/([smhdwMy])$//) {
        $suffix = $1;
    }
    if (! /^\d+$/) {
        die "Can't parse age $age\n";
    }
    if ($suffix) {
        my(%multipliers) = (
            s => 1,
            m => 60,
            h => 60 * 60,
            d => 60 * 60 * 24,
            w => 60 * 60 * 24 * 7,
            M => 60 * 60 * 24 * (365.25 / 12),
            y => 60 * 60 * 24 * 365.25
            );
        $_ *= $multipliers{$suffix};
    }
    return $_;
}

sub verify {
    my($args, $config) = @_;

    my($verify) = &parse_verify($args);
    my($hit) = {};
    my($listed, @files_to_verify);

    if ($verify->{size} or $verify->{count}) {
        $listed = 1;
        my(@ls_cmd) = (&rclone_base_cmd($args, $config),
                       &get_filters($config));
        if ($verify->{age}) {
            push(@ls_cmd, "--max-age", time() - $verify->{since});
        }
        push(@ls_cmd, "ls", $config->{source});
        my(@files, %sizes);
        my $total_size = 0;
        print "Listing files on source...\n" if ($verbose);
        if ($verify->{age}) {
            print("(Limiting listing and verify to files less than ",
                  $verify->{age}, " old)\n") if ($verbose);
        }
        print("Executing @ls_cmd\n") if ($verbose);
        open(LS, "-|", @ls_cmd) or die;
        while (<LS>) {
            chomp;
            if (! /^\s*(\d+)\s+(.*)$/) {
                warn "Unrecognized line in rclone ls output: $_\n";
                next;
            }
            my $size = $1;
            my $file = $2;
            $total_size += $size;
            $sizes{$file} = $size;
        }
        if (! close(LS)) {
            die "@ls_cmd failed\n";
        }
        @files = sort { $sizes{$a} <=> $sizes{$b} } keys %sizes;
        printf("Done (%d files, total size %s)\n",
               scalar @files, &unparse_bytes($total_size)) if ($verbose);

        if ($verify->{size_pct}) {
            $verify->{size} = int($verify->{size} / 100 * $total_size) or 1;
        }
        if ($verify->{count_pct}) {
            $verify->{count} = int($verify->{count} / 100 * scalar @files)
                or 1;
        }

        my $verified_size = 0;
        my $verified_count = 0;
        while (@files) {
            if ($verify->{count} and $verified_count == $verify->{count}) {
                $hit->{count_limit} = 1;
                last;
            }
            if ($verify->{size}) {
                if ($verified_size >= $verify->{size}) {
                    $hit->{size_limit} = 1;
                    last;
                }
                if ($verify->{size_hard}) {
                    @files =
                        grep($sizes{$_} < $verify->{size} - $verified_size,
                             @files);
                    if (! @files) {
                        $hit->{size_limit} = 1;
                        last;
                    }
                }
            }

            my $file;
            if ($verify->{size}) {
                # Strongly prefer larger files, to minimize the amount of money
                # we pay for the storage transactions necessary for
                # verification.
                # Increase $base to make the preference for larger files even
                # stronger.
                my $base = 10;
                my $biggest_size = $sizes{$files[-1]};
                my $want_size = $biggest_size * log(rand($base-1)+1) /
                    log($base);
                for (my $i = scalar @files - 1; $i > 0; $i--) {
                    if ($sizes{$files[$i]} <= $want_size) {
                        $file = splice(@files, $i, 1);
                        last;
                    }
                }
                if (! $file) {
                    $file = splice(@files, 0, 1);
                }
            }
            else {
                my $i = int(rand(scalar @files));
                $file = splice(@files, $i, 1);
            }

            $verified_size += $sizes{$file};
            $verified_count++;
            printf("Verifying %s (%s)...\n", $file,
                   &unparse_bytes($sizes{$file})) if ($verbose);
            push(@files_to_verify, $file);
        }

        if ($hit->{size_limit}) {
            print("Limiting verify to ", &unparse_bytes($verified_size),
                  "...\n") if ($verbose);
        }
        if ($hit->{count_limit}) {
            print("Limiting verify to $verified_count files...\n")
                if ($verbose);
        }
    }

    if ($verify->{all}) {
        print "Verifying entire backup...\n" if ($verbose);
    }

    my(@cmd) = &rclone_base_cmd($args, $config);
    # `rclone check` produces NOTICE messages which we don't want unless the
    # user has specified verbosity.
    push(@cmd, "--quiet") if (! $verbose);
    my(@cmd_tail) = ("check", "--download", $config->{source},
                     $config->{destination});
    my $errors = 0;

    if (! $listed) {
        if ($verify->{age}) {
            print("(Limiting verify to files less than ",
                  $verify->{age}, " old)\n") if ($verbose);
            push(@cmd, "--max-age", time() - $verify->{since});
        }
        push(@cmd, &get_filters($config), @cmd_tail);
        print("Executing @cmd\n") if ($verbose);
        if (system(@cmd)) {
            $errors++;
        }
    }
    else {
        my($filter_fh, $filter_filename) = tempfile();
        binmode($filter_fh, ":utf8");
        my $count = 0;
        while (my $file = shift @files_to_verify) {
            $file =~ s/([*?\[\]\{\}\\])/\\$1/g;
            print($filter_fh "+ /$file\n") or die;
            if (++$count == 1000 or !@files_to_verify) {
                print($filter_fh "- *\n") or die;
                seek($filter_fh, 0, 0); # Force flush
                my(@this_cmd) = @cmd;
                push(@this_cmd, "--filter-from", $filter_filename);
                if ($verify->{age}) {
                    push(@this_cmd, "--max-age", time() - $verify->{since});
                }
                push(@this_cmd, @cmd_tail);
                print("Executing @this_cmd\n") if ($verbose);
                if (system(@this_cmd)) {
                    $errors++;
                }
                truncate($filter_fh, 0);
            }
        }
    }
    if ($errors) {
        warn("Verify failed\n");
    }
    else {
        print("Verify successful\n") if ($verbose);
    }
    exit($errors ? 1 : 0);
}

sub archive_special_files {
    my($args, $config) = @_;
    my $tar_file = $args->{dryrun} ? "/dev/null" :
        "$config->{source}/special-files.tar.gz";
    my $verbose = $args->{verbose} ? "--verbose" : "";
    my $cmd = "set -e; " .
        "cd $config->{source}; " .
        "find . '!' -type d,f,s -print0 | " .
        "tar --null --files-from - --create --gzip --file $tar_file $verbose";
    print "$cmd\n" if ($verbose);
    system($cmd) and die;
    return if ($args->{dryrun});
    my(@cmd) = ("tar", "tvf", $tar_file, "--full-time");
    print("@cmd\n") if ($verbose);
    open(TAR, "-|", @cmd) or die;
    my($newest) = 0;
    while (<TAR>) {
        my($Y, $M, $D, $h, $m, $s) =
            /(\d+)-0*(\d+)-0*(\d+) 0*(\d+):0*(\d+):0*(\d+)/ or next;
        my($stamp) = timelocal($s, $m, $h, $D, $M-1, $Y);
        # Don't allow files with timestamps in the future to screw things up.
        if ($newest < $stamp and $stamp < time()) {
            $newest = $stamp;
        }
    }
    close(TAR) or die;
    print("utime($newest, $newest, $tar_file)\n") if ($verbose);
    utime($newest, $newest, $tar_file) or die;
}

sub get_filters {
    my($config) = @_;
    my(@filters);

    push(@filters, "--filter", "- *~", "--filter", "- .#*");
    foreach my $filter (@{$config->{filters}}) {
        push(@filters, "--filter", $filter);
    }
    return @filters;
}

sub rclone_base_cmd {
    my($args, $config) = @_;
    my $copy_links = defined($config->{copy_links}) ? $config->{copy_links} :
        $args->{copy_links};
    my(@cmd) = ('rclone', $copy_links ? '--copy-links' : '--skip-links');
    for(1..$verbose) {
        push(@cmd, "--verbose");
    }
    if ($args->{quiet}) {
        push(@cmd, "--quiet");
    }
    if ($args->{rclone_config}) {
        push(@cmd, '--config', $args->{rclone_config});
    }
    return @cmd;
}

sub make_rclone_cmd {
    my($args, $config) = @_;
    my(@cmd) = (&rclone_base_cmd($args, $config), "--delete-excluded",
                &get_filters($config));
    if ($args->{dryrun}) {
        push(@cmd, '--dry-run');
    }
    if ($args->{command} eq "sync") {
        push(@cmd, "sync", $config->{source}, $config->{destination});
    }
    else {
        push(@cmd, "ls", $config->{source});
    }
    return(@cmd);
}

sub parse_args {
    my($args, $quiet, $dryrun, $rclone_config, $ls, $newest, %verify,
       $command, $config_file, $copy_links, $filters);
    my $verbose = 0;

    GetOptions("h|help" => sub { print $usage; exit; },
               "v|verbose+" => \$verbose,
               "q|quiet" => \$quiet,
               "n|dryrun|dry-run" => \$dryrun,
               "copy-links" => \$copy_links,
               "rclone-config=s" => \$rclone_config,
               "ls" => \$ls,
               "newest" => \$newest,
               "verify=s" => \%verify,
               "filters" => \$filters) or die $usage;
    $config_file = shift @ARGV or die;
    die "File does not exist: $config_file\n" if (! -f $config_file);
    die "Extra arguments: @ARGV\n" if (@ARGV);
    die "Specify only one of --ls, --verify, --filters\n$usage"
        if (!!$ls + !!$newest + !!%verify + !!$filters > 1);
    if (%verify) {
        $command = "verify";
    } elsif ($ls) {
        $command = "ls";
    } elsif ($newest) {
        $command = "newest";
    } elsif ($filters) {
        $command = "filters";
    } else {
        $command = "sync";
    }
    return {
        verbose => $verbose,
        quiet => $quiet,
        dryrun => $dryrun,
        copy_links => $copy_links,
        config_file => $config_file,
        rclone_config => $rclone_config,
        command => $command,
        verify => \%verify,
    };
}

sub parse_config {
    my($cf) = @_;
    my $config = {};
    my $section;
    $config = {
        "filters" => [],
        "archive_specials" => 1,
        "copy_links" => undef,
    };
    open(CONFIG, "<", $cf) or die "open($cf): $!\n";
    while (<CONFIG>) {
        chomp;
        next if (/^\s*\#/);
        next if (/^\s*$/);
        if (/^\[(.*)\]\s*$/) {
            $section = $1;
            if ($section !~ /^(default|filters|test-filters)$/) {
                die "Unrecognized section in $cf: $section\n";
            }
            next;
        }
        if (! $section) {
            die "Line in $cf before any section: $_\n";
        }
        if ($section eq "default") {
            if (! /^\s*(source|destination|archive_specials|copy_links|pre_command)\s*=\s*(.*\S)/) {
                die "Invalid line in default section: $_\n";
            }
            my $key = $1;
            my $value = $2;
            if ($key =~ /^(?:archive_specials|copy_links)$/) {
                $value = &parse_bool($value);
            }
            $config->{$key} = $value;
            next;
        }
        if ($section eq "test-filters") {
            # These are only used when testing filters,
            next;
        }
        # Only remaining section is [filters]
        if (! /^[-+] /) {
            die "Filter does not start with '^[-+] ': $_\n";
        }
        push(@{$config->{'filters'}}, $_);
    }
    close(CONFIG);
    die "No source specified\n" if (! $config->{source});
    die "No destination specified\n" if (! $config->{destination});
    return $config;
}

sub parse_bool {
    local($_) = @_;

    if (/^(?:true|yes|1)$/i) {
        return 1;
    }
    elsif (/^(?:false|no|0)$/i) {
        return 0;
    }
    else {
        die "Unrecognized boolean value: $_\n";
    }
}
